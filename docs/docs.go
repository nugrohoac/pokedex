// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/pokemon": {
            "get": {
                "description": "Fetch pokemon which filter by optional parameter",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "root"
                ],
                "summary": "Fetch pokemon which filter by optional parameter",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "limit items, default is 20",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "cursor is used to pagination",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by name of pokemon",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pokedex.PokemonFeed"
                        }
                    }
                }
            },
            "post": {
                "description": "Store a new pokemon",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "root"
                ],
                "summary": "Store a new pokemon",
                "parameters": [
                    {
                        "description": "create pokemon",
                        "name": "pokemon",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pokedex.Pokemon"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success create a new pokemon",
                        "schema": {
                            "$ref": "#/definitions/pokedex.Pokemon"
                        }
                    },
                    "409": {
                        "description": "Pokemon with current name has been existing",
                        "schema": {
                            "$ref": "#/definitions/pokedex.ErrDuplicated"
                        }
                    }
                }
            }
        },
        "/pokemon/{id}": {
            "put": {
                "description": "Update pokemon by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "root"
                ],
                "summary": "Update pokemon by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id-pokemon",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "update pokemon",
                        "name": "pokemon",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pokedex.Pokemon"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pokedex.Pokemon"
                        }
                    },
                    "404": {
                        "description": "item will be update is not found",
                        "schema": {
                            "$ref": "#/definitions/pokedex.ErrNotFound"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete pokemon by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "root"
                ],
                "summary": "Delete pokemon by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id-pokemon",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {},
                    "404": {
                        "description": "item will be delete is not found",
                        "schema": {
                            "$ref": "#/definitions/pokedex.ErrNotFound"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "pokedex.ErrDuplicated": {
            "type": "object",
            "properties": {
                "Message": {
                    "type": "string",
                    "example": "item already exist"
                }
            }
        },
        "pokedex.ErrNotFound": {
            "type": "object",
            "properties": {
                "Message": {
                    "type": "string",
                    "example": "item is not found"
                }
            }
        },
        "pokedex.Pokemon": {
            "type": "object",
            "required": [
                "name",
                "number",
                "types"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "example": "id-pokemon-string"
                },
                "name": {
                    "type": "string",
                    "example": "pikachu"
                },
                "number": {
                    "type": "string",
                    "example": "001"
                },
                "types": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "water",
                        " ice"
                    ]
                }
            }
        },
        "pokedex.PokemonFeed": {
            "type": "object",
            "properties": {
                "cursor": {
                    "type": "string"
                },
                "data": {
                    "$ref": "#/definitions/pokedex.PokemonList"
                }
            }
        },
        "pokedex.PokemonList": {
            "type": "object",
            "properties": {
                "pokemons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/pokedex.Pokemon"
                    }
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "",
	BasePath:    "/",
	Schemes:     []string{"http"},
	Title:       "Echo Swagger Example API",
	Description: "This is a sample server server.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
